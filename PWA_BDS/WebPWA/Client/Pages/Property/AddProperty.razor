@page "/property/addproperty"
@using Client.ViewModel
@using WebPWA.Shared
@using System.Net.Http.Headers;
@inject NavigationManager NavigationManager
@inject PropertyViewModel _propertyViewModel
@inject UserViewModel _userViewModel
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>Đăng tin nhà đất</h3>
@if (isLogin)
{
    <EditForm Model="@_propertyViewModel" OnValidSubmit="HandleAddProperty">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Tiêu đề</label>
            <InputText @bind-Value="_propertyViewModel.Title" class="form-control" />
            <ValidationMessage For="@(() => _propertyViewModel.Title)" />
        </div>
        <label>Loại</label>
        <select @bind="_propertyViewModel.PropertyTypeID">
            <option value="0">Phân mục</option>
            @foreach (var type in lstPropertyType)
            {
                <option value="@type.ID">@type.Name</option>
            }
        </select>
        <br />
        <label>Tỉnh / Thành phố</label>
        <select @onchange="CityChange">
            <option value="0">Tỉnh / Thành phố</option>
            @foreach (var city in lstCity)
            {
                <option value="@city.ID">@city.Name</option>
            }
        </select>
        <br />
        <label>Quận / Huyện</label>
        <select @onchange="DistrictChange">
            <option value="0">Quận / Huyện</option>
            @foreach (var district in lstDistrict)
            {
                <option value="@district.ID">@district.Name</option>
            }
        </select>
        <br />
        <label>Phường / Xã</label>
        <select @bind="_propertyViewModel.LocationID">
            <option value="0">Phường / Xã</option>
            @foreach (var ward in lstWard)
            {
                <option value="@ward.ID">@ward.Name</option>
            }
        </select>
        <br />
        <div class="form-group">
            <label>Địa chỉ</label>
            <InputText @bind-Value="_propertyViewModel.Address" class="form-control" />
            <ValidationMessage For="@(() => _propertyViewModel.Address)" />
        </div>
        <div class="form-group">
            <label>Chiều rộng</label>
            <input type="text" min="0" decimal="true" numbersonly="true" numberonly="2" max="9999" @bind-value="_propertyViewModel.Width" class="form-control" />
            <ValidationMessage For="@(() => _propertyViewModel.Width)" />
        </div>
        <div class="form-group">
            <label>Chiều dài</label>
            <InputNumber @bind-Value="_propertyViewModel.Length" class="form-control" />
            <ValidationMessage For="@(() => _propertyViewModel.Length)" />
        </div>
        <div class="form-group">
            <label>Diện tích</label>
            <InputNumber @bind-Value="_propertyViewModel.Area" class="form-control" /> m2
        </div>
        <div class="form-group">
            <label>Giá từ</label>
            <InputNumber @bind-Value="_propertyViewModel.PriceFrom" class="form-control" /> m2
        </div>
        <div class="form-group">
            <label>đến</label>
            <InputNumber @bind-Value="_propertyViewModel.PriceTo" class="form-control" /> m2
        </div>
        <label>Hướng</label>
        <select @bind="_propertyViewModel.OrientationID">
            <option value="0">KXĐ</option>
            @foreach (var ori in lstOrientation)
            {
                <option value="@ori.ID">@ori.Name</option>
            }
        </select>
        <br />
        <div class="form-group">
            <label>Số kho</label>
            <InputNumber @bind-Value="_propertyViewModel.NoOfStorey" class="form-control" />
        </div>
        <div class="form-group">
            <label>Số phòng</label>
            <InputNumber @bind-Value="_propertyViewModel.NoOfRooms" class="form-control" />
        </div>
        <div class="form-group">
            <label>Số toilet</label>
            <InputNumber @bind-Value="_propertyViewModel.NoOfToilets" class="form-control" />
        </div>
        <div class="form-group">
            <label>Mô tả chi tiết</label>
            <InputTextArea @bind-Value="_propertyViewModel.Content" class="form-control" />
        </div>
        <input type="file" @ref="_input" @onchange="UploadChange" id="BrowseImage" style="display:none" accept=".jpg, .jpeg, .png" /><br />
        <img id="UploadImage" src="@imgSrc" @onclick="UploadClickEvent" style="width:300px;cursor:pointer" />
        <button type="button" class="btn-primary" @onclick="ClearImage">Xóa hình</button>
        <br />
        <label>Loại tin</label>
        <select @bind="_propertyViewModel.AdsID">
            <option value="0">Phân mục</option>
            @foreach (var type in lstAds)
            {
                <option value="@type.ID">@type.Name</option>
            }
        </select>
        <br />
        <div class="form-group">
            <label>Ngày đăng</label>
            <InputDate @bind-Value="_propertyViewModel.ValidityDateFrom" style="width:200px" class="form-control" />
        </div>
        <div class="form-group">
            <label>Ngày hết hạn</label>
            <InputDate @bind-Value="_propertyViewModel.ValidityDateTo" style="width:200px" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary" style="margin-top:30px;margin-left:50px">Đăng tin</button>
    </EditForm>
}
else
{
    <h2>Vui lòng đăng nhập để tiếp tục đăng tin</h2>
}


@code {
    List<Code> lstPropertyType = new List<Code>();
    List<Location> lstCity = new List<Location>();
    List<Location> lstDistrict = new List<Location>();
    List<Location> lstWard = new List<Location>();
    List<Code> lstOrientation = new List<Code>();
    List<Code> lstAds = new List<Code>();
    Guid selectedCityID, selectedDistrictID;
    IFileListEntry file;
    string key = "userInfo";
    string imgSrc;
    bool isLogin = false;
    UserSession currentUser = new UserSession();
    MemoryStream memoryStream;
    string fileName;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await localStorage.GetItemAsync<UserSession>(key);
        if (currentUser != null)
        {
            isLogin = true;
            lstAds = await _propertyViewModel.GetNewType();
            lstPropertyType = await _propertyViewModel.GetPropertyType();
            lstCity = await _propertyViewModel.GetCity();
            lstOrientation = await _propertyViewModel.GetOrientation();
            imgSrc = "Content/images/no-image-available-icon-7.jpg";
        }

    }

    private async Task CityChange(ChangeEventArgs e)
    {
        selectedCityID = Guid.Parse(e.Value.ToString());
        lstDistrict = await _propertyViewModel.GetDistrict(selectedCityID);
        lstWard = new List<Location>();
        _propertyViewModel.LocationID = Guid.Empty;
    }

    private async Task DistrictChange(ChangeEventArgs e)
    {
        selectedDistrictID = Guid.Parse(e.Value.ToString());
        lstWard = await _propertyViewModel.GetWard(selectedDistrictID);
        _propertyViewModel.LocationID = Guid.Empty;
    }

    private async Task HandleAddProperty()
    {
        foreach (var file in await FileReaderService.CreateReference(_input).EnumerateFilesAsync())
        {
            if (file != null)
            {
                var fileInfo = await file.ReadFileInfoAsync();
                using (var ms = await file.CreateMemoryStreamAsync(4 * 1024))
                {
                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms, Convert.ToInt32(ms.Length)), "image", fileInfo.Name);
                    await _propertyViewModel.UploadProductImage(content);
                    _propertyViewModel.Image = fileInfo.Name;
                }
            }
        }
        User u = await _userViewModel.GetUserByLoginName(currentUser.LoginName);
        _propertyViewModel.CreatedUserID = u.ID;
        await _propertyViewModel.CreateProperty();
        NavigationManager.NavigateTo("/");
    }

    private async Task UploadClickEvent()
    {
        await JSRuntime.InvokeVoidAsync("UploadClickEvent");
    }

    private async Task UploadChange()
    {
        foreach (var file in await FileReaderService.CreateReference(_input).EnumerateFilesAsync())
        {
            if (file != null)
            {
                var fileInfo = await file.ReadFileInfoAsync();
                using (var ms = await file.CreateMemoryStreamAsync(4 * 1024))
                {
                    imgSrc = "data:image/png;base64," + Convert.ToBase64String(ms.ToArray(), 0, ms.ToArray().Length);
                }
            }
        }
        //file = files.FirstOrDefault();
        //if (file != null)
        //{
        //    memoryStream = new MemoryStream();
        //    await file.Data.CopyToAsync(memoryStream);
        //    imgSrc = "data:image/png;base64," + Convert.ToBase64String(memoryStream.ToArray(), 0, memoryStream.ToArray().Length);
        //}
    }

    private void ClearImage()
    {
        imgSrc = "Content/images/no-image-available-icon-7.jpg";
    }
}

@code{

}